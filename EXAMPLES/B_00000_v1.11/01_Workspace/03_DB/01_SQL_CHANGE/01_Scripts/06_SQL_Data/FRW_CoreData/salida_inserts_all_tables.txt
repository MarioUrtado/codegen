> @INSERT_ESB_CANONICAL_ERROR_TYPE.sql
> set DEFINE OFF
> set SERVEROUTPUT ON
> WHENEVER SQLERROR CONTINUE ROLLBACK
> DECLARE

vRes NUMBER;

BEGIN


	BEGIN

			INSERT INTO ESB_CANONICAL_ERROR_TYPE(ID,TYPE,DESCRIPTION,RCD_STATUS) values ( ESB_CANONICAL_ERROR_TYPE_SEQ.NEXTVAL,'NEG','','1');
	END;

	BEGIN

			INSERT INTO ESB_CANONICAL_ERROR_TYPE(ID,TYPE,DESCRIPTION,RCD_STATUS) values ( ESB_CANONICAL_ERROR_TYPE_SEQ.NEXTVAL,'DAT','','1');
	END;

	BEGIN

			INSERT INTO ESB_CANONICAL_ERROR_TYPE(ID,TYPE,DESCRIPTION,RCD_STATUS) values ( ESB_CANONICAL_ERROR_TYPE_SEQ.NEXTVAL,'TEC','','1');
	END;

	BEGIN

			INSERT INTO ESB_CANONICAL_ERROR_TYPE(ID,TYPE,DESCRIPTION,RCD_STATUS) values ( ESB_CANONICAL_ERROR_TYPE_SEQ.NEXTVAL,'SEG','','1');
	END;

	BEGIN

			INSERT INTO ESB_CANONICAL_ERROR_TYPE(ID,TYPE,DESCRIPTION,RCD_STATUS) values ( ESB_CANONICAL_ERROR_TYPE_SEQ.NEXTVAL,'UNK','','1');
	END;

	BEGIN

			INSERT INTO ESB_CANONICAL_ERROR_TYPE(ID,TYPE,DESCRIPTION,RCD_STATUS) values ( ESB_CANONICAL_ERROR_TYPE_SEQ.NEXTVAL,'FWNE','','1');
	END;

	BEGIN

			INSERT INTO ESB_CANONICAL_ERROR_TYPE(ID,TYPE,DESCRIPTION,RCD_STATUS) values ( ESB_CANONICAL_ERROR_TYPE_SEQ.NEXTVAL,'FWDA','','1');
	END;

	BEGIN

			INSERT INTO ESB_CANONICAL_ERROR_TYPE(ID,TYPE,DESCRIPTION,RCD_STATUS) values ( ESB_CANONICAL_ERROR_TYPE_SEQ.NEXTVAL,'FWTE','','1');
	END;

	BEGIN

			INSERT INTO ESB_CANONICAL_ERROR_TYPE(ID,TYPE,DESCRIPTION,RCD_STATUS) values ( ESB_CANONICAL_ERROR_TYPE_SEQ.NEXTVAL,'FWSE','','1');
	END;

	BEGIN

			INSERT INTO ESB_CANONICAL_ERROR_TYPE(ID,TYPE,DESCRIPTION,RCD_STATUS) values ( ESB_CANONICAL_ERROR_TYPE_SEQ.NEXTVAL,'FWUN','','1');
	END;

	BEGIN

			INSERT INTO ESB_CANONICAL_ERROR_TYPE(ID,TYPE,DESCRIPTION,RCD_STATUS) values ( ESB_CANONICAL_ERROR_TYPE_SEQ.NEXTVAL,'FWCF','','1');
	END;


END;
anonymous block completed
> COMMIT
commited.
> @INSERT_ESB_CANONICAL_ERROR.sql
> set DEFINE OFF
> set SERVEROUTPUT ON
> WHENEVER SQLERROR CONTINUE ROLLBACK
> DECLARE

vRes NUMBER;

BEGIN

	BEGIN

			INSERT INTO ESB_CANONICAL_ERROR(ID,CODE,TYPE_ID,DESCRIPTION,PRIORITY,RCD_STATUS) values ( ESB_CANONICAL_ERROR_SEQ.NEXTVAL,'10001',( SELECT ID FROM ESB_CANONICAL_ERROR_TYPE WHERE TYPE = 'FWNE'),'Mensaje duplicado - Transaccion original en curso','3','1');
	END;
	
	BEGIN

			INSERT INTO ESB_CANONICAL_ERROR(ID,CODE,TYPE_ID,DESCRIPTION,PRIORITY,RCD_STATUS) values ( ESB_CANONICAL_ERROR_SEQ.NEXTVAL,'10002',( SELECT ID FROM ESB_CANONICAL_ERROR_TYPE WHERE TYPE = 'FWNE'),'Mensaje duplicado - Idempotencia','3','1');
	END;

	BEGIN

			INSERT INTO ESB_CANONICAL_ERROR(ID,CODE,TYPE_ID,DESCRIPTION,PRIORITY,RCD_STATUS) values ( ESB_CANONICAL_ERROR_SEQ.NEXTVAL,'10003',( SELECT ID FROM ESB_CANONICAL_ERROR_TYPE WHERE TYPE = 'FWNE'),'Mensaje duplicado - Transaccion OK','3','1');
	END;

	BEGIN

			INSERT INTO ESB_CANONICAL_ERROR(ID,CODE,TYPE_ID,DESCRIPTION,PRIORITY,RCD_STATUS) values ( ESB_CANONICAL_ERROR_SEQ.NEXTVAL,'10004',( SELECT ID FROM ESB_CANONICAL_ERROR_TYPE WHERE TYPE = 'FWNE'),'Mensaje duplicado - Transaccion ERROR','3','1');
	END;

	BEGIN

			INSERT INTO ESB_CANONICAL_ERROR(ID,CODE,TYPE_ID,DESCRIPTION,PRIORITY,RCD_STATUS) values ( ESB_CANONICAL_ERROR_SEQ.NEXTVAL,'10005',( SELECT ID FROM ESB_CANONICAL_ERROR_TYPE WHERE TYPE = 'FWNE'),'Mensaje duplicado','3','1');
	END;
	
	BEGIN

			INSERT INTO ESB_CANONICAL_ERROR(ID,CODE,TYPE_ID,DESCRIPTION,PRIORITY,RCD_STATUS) values ( ESB_CANONICAL_ERROR_SEQ.NEXTVAL,'30001',( SELECT ID FROM ESB_CANONICAL_ERROR_TYPE WHERE TYPE = 'TEC'),'Error de Conexión','2','1');
	END;
	
	BEGIN

			INSERT INTO ESB_CANONICAL_ERROR(ID,CODE,TYPE_ID,DESCRIPTION,PRIORITY,RCD_STATUS) values ( ESB_CANONICAL_ERROR_SEQ.NEXTVAL,'-1',( SELECT ID FROM ESB_CANONICAL_ERROR_TYPE WHERE TYPE = 'FWCF'),'NO SE HAN ENCONTRADO DATOS.','2','1');
	END;
	
	BEGIN

			INSERT INTO ESB_CANONICAL_ERROR(ID,CODE,TYPE_ID,DESCRIPTION,PRIORITY,RCD_STATUS) values ( ESB_CANONICAL_ERROR_SEQ.NEXTVAL,'50006',( SELECT ID FROM ESB_CANONICAL_ERROR_TYPE WHERE TYPE = 'FWCF'),'Traduccion de Error no encontrada.','3','1');
	END;
	

END;
anonymous block completed
> COMMIT
commited.
> @INSERT_ESB_CHECK_TYPE.sql
> set DEFINE OFF
> set SERVEROUTPUT ON
> WHENEVER SQLERROR CONTINUE ROLLBACK
> DECLARE

BEGIN

	BEGIN
		Insert into ESB_CHECK_TYPE (ID,NAME,GRADE,RCD_STATUS) values (ESB_CHECK_TYPE_SEQ.NEXTVAL,'IDEMPOTENT','10','1');
	END;
	
	BEGIN
		Insert into ESB_CHECK_TYPE (ID,NAME,GRADE,RCD_STATUS) values (ESB_CHECK_TYPE_SEQ.NEXTVAL,'RESULT','5','1');
	END;

END;
anonymous block completed
> COMMIT
commited.
> @INSERT_ESB_CONFIG_PROPERTY.sql
> set DEFINE OFF
> set SERVEROUTPUT ON
> WHENEVER SQLERROR CONTINUE ROLLBACK
> DECLARE

BEGIN

	BEGIN
		Insert into ESB_CONFIG_PROPERTY (ID,NAME,DESCRIPTION,RCD_STATUS) values (ESB_CONFIG_PROPERTY_SEQ.NEXTVAL,'soapAction','SOAPAction, para 1.1 o 1.2','1');
	END;
	
	BEGIN
		Insert into ESB_CONFIG_PROPERTY (ID,NAME,DESCRIPTION,RCD_STATUS) values (ESB_CONFIG_PROPERTY_SEQ.NEXTVAL,'url','URL for service','1');
	END;
	
END;
anonymous block completed
> COMMIT
commited.
> @INSERT_ESB_CONSUMER_DETAILS_TYPE.sql
> set DEFINE OFF
> set SERVEROUTPUT ON
> WHENEVER SQLERROR CONTINUE ROLLBACK
> DECLARE

BEGIN

	BEGIN
		Insert into ESB_CONSUMER_DETAILS_TYPE (ID,NAME,DESCRIPTION) values (ESB_CONSUMER_DETAILS_TYPE_SEQ.NEXTVAL,'TRANSPORT','Consumer Callback TRANSPORT');
	END;
	
	BEGIN		
		Insert into ESB_CONSUMER_DETAILS_TYPE (ID,NAME,DESCRIPTION) values (ESB_CONSUMER_DETAILS_TYPE_SEQ.NEXTVAL,'URL','Consumer Callback URI');
	END;
	
	BEGIN		
		Insert into ESB_CONSUMER_DETAILS_TYPE (ID,NAME,DESCRIPTION) values (ESB_CONSUMER_DETAILS_TYPE_SEQ.NEXTVAL,'Mail','Mail Address');
	END;

END;
anonymous block completed
> COMMIT
commited.
> @INSERT_ESB_COUNTRY.sql
> set DEFINE OFF
> set SERVEROUTPUT ON
> WHENEVER SQLERROR CONTINUE ROLLBACK
> DECLARE

BEGIN

	BEGIN
		Insert into ESB_COUNTRY (ID,CODE,NAME,DESCRIPTION,RCD_STATUS) values (ESB_COUNTRY_SEQ.NEXTVAL,'0','UNK','UNKNOWN','1');
	END;
	
	BEGIN
		Insert into ESB_COUNTRY (ID,CODE,NAME,DESCRIPTION,RCD_STATUS) values (ESB_COUNTRY_SEQ.NEXTVAL,'CHL','CHL','CHILE','1');
	END;

END;
anonymous block completed
> COMMIT
commited.
> @INSERT_ESB_DEFAULT_CHECK.sql
> set DEFINE OFF
> set SERVEROUTPUT ON
> WHENEVER SQLERROR CONTINUE ROLLBACK
> DECLARE

BEGIN

	BEGIN
		Insert into ESB_DEFAULT_CHECK (ID,TYPE,NAME,GRADE,RCD_STATUS,ELAPSED_TIME) values (ESB_DEFAULT_CHECK_SEQ.NEXTVAL,'1','ONGOING','100','1','0 0:1:0.0');
	END;
	
	BEGIN
		Insert into ESB_DEFAULT_CHECK (ID,TYPE,NAME,GRADE,RCD_STATUS,ELAPSED_TIME) values (ESB_DEFAULT_CHECK_SEQ.NEXTVAL,'2','REJECT','0','1','0 0:0:0.0');
	END;
	
END;
anonymous block completed
> COMMIT
commited.
> @INSERT_ESB_ENDPOINT_TRANSPORT.sql
> set DEFINE OFF
> set SERVEROUTPUT ON
> WHENEVER SQLERROR CONTINUE ROLLBACK
> DECLARE

BEGIN

	BEGIN
		Insert into ESB_ENDPOINT_TRANSPORT (ID,NAME,RCD_STATUS) values (ESB_ENDPOINT_TRANSPORT_SEQ.NEXTVAL,'MQ','1');
	END;
	
	BEGIN
		Insert into ESB_ENDPOINT_TRANSPORT (ID,NAME,RCD_STATUS) values (ESB_ENDPOINT_TRANSPORT_SEQ.NEXTVAL,'OSB','1');
	END;
	
	BEGIN
		Insert into ESB_ENDPOINT_TRANSPORT (ID,NAME,RCD_STATUS) values (ESB_ENDPOINT_TRANSPORT_SEQ.NEXTVAL,'JNDI','1');
	END;
	
	BEGIN
		Insert into ESB_ENDPOINT_TRANSPORT (ID,NAME,RCD_STATUS) values (ESB_ENDPOINT_TRANSPORT_SEQ.NEXTVAL,'JMS','1');
	END;
	
	BEGIN
		Insert into ESB_ENDPOINT_TRANSPORT (ID,NAME,RCD_STATUS) values (ESB_ENDPOINT_TRANSPORT_SEQ.NEXTVAL,'HTTP','1');
	END;
		
	BEGIN	
		Insert into ESB_ENDPOINT_TRANSPORT (ID,NAME,RCD_STATUS) values (ESB_ENDPOINT_TRANSPORT_SEQ.NEXTVAL,'HTTPSOAP12','1');
	END;

END;
anonymous block completed
> COMMIT
commited.
> @INSERT_ESB_ENTERPRISE.sql
> set DEFINE OFF
> set SERVEROUTPUT ON
> WHENEVER SQLERROR CONTINUE ROLLBACK
> DECLARE

BEGIN

	BEGIN
		Insert into ESB_ENTERPRISE (ID,CODE,NAME,RCD_STATUS) values (ESB_ENTERPRISE_SEQ.NEXTVAL,'ENTEL','ENTEL','0');
	END;

END;
anonymous block completed
> COMMIT
commited.
> @INSERT_ESB_ERROR_DERIVATION_CONF.sql
> set DEFINE OFF
> set SERVEROUTPUT ON
> WHENEVER SQLERROR CONTINUE ROLLBACK
> DECLARE

BEGIN

	BEGIN
		Insert into ESB_ERROR_DERIVATION_CONF (ID,COUNT_PRIORITY_1,COUNT_PRIORITY_2,COUNT_PRIORITY_3,RUN_STATE) values (ESB_ERROR_DERIVATION_CONF_SEQ.NEXTVAL,'2','2','2','1');
	END;

END;
anonymous block completed
> COMMIT
commited.
> @INSERT_ESB_ERROR_STATUS_TYPE.sql
> set DEFINE OFF
> set SERVEROUTPUT ON
> WHENEVER SQLERROR CONTINUE ROLLBACK
> DECLARE

vRes NUMBER;

BEGIN


	BEGIN

			INSERT INTO ESB_ERROR_STATUS_TYPE(ID,NAME,DESCRIPTION,RCD_STATUS) values ( ESB_ERROR_STATUS_TYPE_SEQ.NEXTVAL,'OK','Transaccion que finaliza exitosamente.','1');
	END;

	BEGIN

			INSERT INTO ESB_ERROR_STATUS_TYPE(ID,NAME,DESCRIPTION,RCD_STATUS) values ( ESB_ERROR_STATUS_TYPE_SEQ.NEXTVAL,'WARNING','Transaccion que finaliza con advertencias','1');
	END;

	BEGIN

			INSERT INTO ESB_ERROR_STATUS_TYPE(ID,NAME,DESCRIPTION,RCD_STATUS) values ( ESB_ERROR_STATUS_TYPE_SEQ.NEXTVAL,'ERROR','Transaccion que finaliza con error','1');
	END;


END;
anonymous block completed
> COMMIT
commited.
> @INSERT_ESB_LOG_TYPE.sql
> set DEFINE OFF
> set SERVEROUTPUT ON
> WHENEVER SQLERROR CONTINUE ROLLBACK
> DECLARE

BEGIN

	BEGIN
		Insert into ESB_LOG_TYPE (ID,NAME,DESCRIPTION,RCD_STATUS) values (ESB_LOG_TYPE_SEQ.NEXTVAL,'SREQ','Service Request','0');
	END;
	
	BEGIN
		Insert into ESB_LOG_TYPE (ID,NAME,DESCRIPTION,RCD_STATUS) values (ESB_LOG_TYPE_SEQ.NEXTVAL,'SRSP','Service Response','0');
	END;

	BEGIN
		Insert into ESB_LOG_TYPE (ID,NAME,DESCRIPTION,RCD_STATUS) values (ESB_LOG_TYPE_SEQ.NEXTVAL,'LOG','Generic Log','0');
	END;

END;
anonymous block completed
> COMMIT
commited.
> @INSERT_ESB_SEVERITY.sql
> set DEFINE OFF
> set SERVEROUTPUT ON
> WHENEVER SQLERROR CONTINUE ROLLBACK
> DECLARE

BEGIN

	BEGIN
		Insert into ESB_SEVERITY (ID,"LEVEL",DESCRIPTION,"ORDER",RCD_STATUS) values (ESB_SEVERITY_SEQ.NEXTVAL,'INFO','Log Info level','100','0');
	END;

	BEGIN
		Insert into ESB_SEVERITY (ID,"LEVEL",DESCRIPTION,"ORDER",RCD_STATUS) values (ESB_SEVERITY_SEQ.NEXTVAL,'WARNING','Log Warning level','200','0');
	END;
	
	BEGIN
		Insert into ESB_SEVERITY (ID,"LEVEL",DESCRIPTION,"ORDER",RCD_STATUS) values (ESB_SEVERITY_SEQ.NEXTVAL,'DEBUG','Log Debug level','0','0');
	END;
	
END;
anonymous block completed
> COMMIT
commited.
> @INSERT_ESB_SYSTEM.sql
> set DEFINE OFF
> set SERVEROUTPUT ON
> WHENEVER SQLERROR CONTINUE ROLLBACK
> DECLARE

vRes NUMBER;

BEGIN


	BEGIN

			INSERT INTO ESB_SYSTEM(ID,CODE,NAME,DESCRIPTION,RCD_STATUS) values ( ESB_SYSTEM_SEQ.NEXTVAL,'FRW','Framework SOA 1.0','Conjunto de servicios transversales, que conforman el framework SOA 1.0','1');
	END;

END;
anonymous block completed
> COMMIT
commited.
> @INSERT_ESB_CONSUMER.sql
> set DEFINE OFF
> set SERVEROUTPUT ON
> WHENEVER SQLERROR CONTINUE ROLLBACK
> DECLARE

BEGIN

	BEGIN
		Insert into ESB_CONSUMER (ID,SYSCODE,COUNTRY_ID,ENT_CODE,RCD_STATUS) values (ESB_CONSUMER_SEQ.NEXTVAL, (SELECT ID FROM ESB_SYSTEM WHERE CODE = 'FRW') ,
																					(SELECT ID FROM ESB_COUNTRY WHERE CODE = 'CHL'), 
																					(SELECT ID FROM ESB_ENTERPRISE WHERE CODE = 'ENTEL'), '1');
	END;
	
	
END;
anonymous block completed
> COMMIT
commited.
> @INSERT_ESB_CORRELATION_MEMBER_TYPE.sql
> set DEFINE OFF
> set SERVEROUTPUT ON
> WHENEVER SQLERROR CONTINUE ROLLBACK
> DECLARE

BEGIN

	BEGIN
		Insert into ESB_CORRELATION_MEMBER_TYPE (ID,NAME,DESCRIPTION) values (ESB_CORRELATION_MEMBER_T_SEQ.NEXTVAL,'GroupOwner','Creador del Grupo.');
	END;
	
	BEGIN
		Insert into ESB_CORRELATION_MEMBER_TYPE (ID,NAME,DESCRIPTION) values (ESB_CORRELATION_MEMBER_T_SEQ.NEXTVAL,'GroupController','Controlador del Grupo.');
	END;
	
	BEGIN
		Insert into ESB_CORRELATION_MEMBER_TYPE (ID,NAME,DESCRIPTION) values (ESB_CORRELATION_MEMBER_T_SEQ.NEXTVAL,'GroupProvider','Proveedor del Grupo.');
	END;
	
	BEGIN
		Insert into ESB_CORRELATION_MEMBER_TYPE (ID,NAME,DESCRIPTION) values (ESB_CORRELATION_MEMBER_T_SEQ.NEXTVAL,'GroupConsumer','Consumidor del Grupo.');
	END;

END;
anonymous block completed
> COMMIT
commited.
> @INSERT_ESB_ERROR_MAPPING.sql
> set DEFINE OFF
> set SERVEROUTPUT ON
> WHENEVER SQLERROR CONTINUE ROLLBACK
> DECLARE

BEGIN

	BEGIN
		INSERT INTO ESB_ERROR_MAPPING(ID,ERROR_SOURCE,MODULE,SUB_MODULE,RAW_CODE,RAW_DESCRIPTION,CAN_ERR_ID,STATUS_ID,RCD_STATUS) values ( ESB_ERROR_MAPPING_SEQ.NEXTVAL,
																													( SELECT ID FROM ESB_SYSTEM WHERE CODE = 'FRW'),
																													'MessageManager', 
																													'checkIN',
																													'10',
																													'Transaction ONGOING',
																													( SELECT ID FROM ESB_CANONICAL_ERROR WHERE CODE = '10001' AND TYPE_ID = (SELECT ID FROM ESB_CANONICAL_ERROR_TYPE WHERE TYPE = 'FWNE')),
																													( SELECT ID FROM ESB_ERROR_STATUS_TYPE WHERE NAME = 'ERROR'),
																													'1');
	END;
		
	BEGIN
		INSERT INTO ESB_ERROR_MAPPING(ID,ERROR_SOURCE,MODULE,SUB_MODULE,RAW_CODE,RAW_DESCRIPTION,CAN_ERR_ID,STATUS_ID,RCD_STATUS) values ( ESB_ERROR_MAPPING_SEQ.NEXTVAL,
																													( SELECT ID FROM ESB_SYSTEM WHERE CODE = 'FRW'),
																													'MessageManager', 
																													'checkIN',
																													'25',
																													'Duplicate Message',
																													( SELECT ID FROM ESB_CANONICAL_ERROR WHERE CODE = '10005' AND TYPE_ID = (SELECT ID FROM ESB_CANONICAL_ERROR_TYPE WHERE TYPE = 'FWNE')),
																													( SELECT ID FROM ESB_ERROR_STATUS_TYPE WHERE NAME = 'ERROR'),
																													'1');
	END;	
		
	BEGIN	
		INSERT INTO ESB_ERROR_MAPPING(ID,ERROR_SOURCE,MODULE,SUB_MODULE,RAW_CODE,RAW_DESCRIPTION,CAN_ERR_ID,STATUS_ID,RCD_STATUS) values ( ESB_ERROR_MAPPING_SEQ.NEXTVAL,
																													( SELECT ID FROM ESB_SYSTEM WHERE CODE = 'FRW'),
																													'MessageManager', 
																													'checkIN',
																													'15',
																													'Transaction IDEMPOTENT',
																													( SELECT ID FROM ESB_CANONICAL_ERROR WHERE CODE = '10002' AND TYPE_ID = (SELECT ID FROM ESB_CANONICAL_ERROR_TYPE WHERE TYPE = 'FWNE')),
																													( SELECT ID FROM ESB_ERROR_STATUS_TYPE WHERE NAME = 'ERROR'),
																													'1');
	END;	
		
	BEGIN
		INSERT INTO ESB_ERROR_MAPPING(ID,ERROR_SOURCE,MODULE,SUB_MODULE,RAW_CODE,RAW_DESCRIPTION,CAN_ERR_ID,STATUS_ID,RCD_STATUS) values ( ESB_ERROR_MAPPING_SEQ.NEXTVAL,
																													( SELECT ID FROM ESB_SYSTEM WHERE CODE = 'FRW'),
																													'MessageManager', 
																													'checkIN',
																													'21',
																													'Duplicate Message - Result is an OK',
																													( SELECT ID FROM ESB_CANONICAL_ERROR WHERE CODE = '10004' AND TYPE_ID = (SELECT ID FROM ESB_CANONICAL_ERROR_TYPE WHERE TYPE = 'FWNE')),
																													( SELECT ID FROM ESB_ERROR_STATUS_TYPE WHERE NAME = 'ERROR'),
																													'1');
	END;	
		
	BEGIN	
		INSERT INTO ESB_ERROR_MAPPING(ID,ERROR_SOURCE,MODULE,SUB_MODULE,RAW_CODE,RAW_DESCRIPTION,CAN_ERR_ID,STATUS_ID,RCD_STATUS) values ( ESB_ERROR_MAPPING_SEQ.NEXTVAL,
																													( SELECT ID FROM ESB_SYSTEM WHERE CODE = 'FRW'),
																													'MessageManager', 
																													'checkIN',
																													'20',
																													'Duplicate Message - Result is an ERROR',
																													( SELECT ID FROM ESB_CANONICAL_ERROR WHERE CODE = '10003' AND TYPE_ID = (SELECT ID FROM ESB_CANONICAL_ERROR_TYPE WHERE TYPE = 'FWNE')),
																													( SELECT ID FROM ESB_ERROR_STATUS_TYPE WHERE NAME = 'ERROR'),
																													'1');
	END;

END;
anonymous block completed
> COMMIT
commited.
> @INSERT_ESB_ERROR_TREATMENT_TYPE.sql
> set DEFINE OFF
> set SERVEROUTPUT ON
> WHENEVER SQLERROR CONTINUE ROLLBACK
> DECLARE

BEGIN

	BEGIN
		Insert into ESB_ERROR_TREATMENT_TYPE (ID,NAME,DESCRIPTION,RCD_STATUS) values (ESB_ERROR_TREATMENT_TYPE_SEQ.NEXTVAL,'Mail','Envio de Error por Mail.','1');
	END;

END;
anonymous block completed
> COMMIT
commited.
> SPOOL OFF
