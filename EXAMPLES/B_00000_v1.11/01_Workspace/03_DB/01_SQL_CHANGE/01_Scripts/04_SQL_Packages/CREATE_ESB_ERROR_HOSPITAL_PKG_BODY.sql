create or replace PACKAGE BODY "ESB_ERROR_HOSPITAL_PKG" AS

PROCEDURE SP_ERROR_DISPATCHER_PROGRESS
(P_ERROR_HOSPITAL_ID IN NUMBER ,
 p_SOURCE_ERROR_DESC OUT VARCHAR2, 
 p_SOURCE_ERROR_CODE OUT VARCHAR2) AS 
BEGIN
  
  UPDATE ESB_ERROR_DISPATCHER SET STATUS = 'PENDING', COUNT_RETRY = (COUNT_RETRY + 1) WHERE ID = P_ERROR_HOSPITAL_ID;
  IF SQL%NOTFOUND THEN
    p_SOURCE_ERROR_DESC := 'NO_DATA_FOUND';
    p_SOURCE_ERROR_CODE := '1';
  END IF;
EXCEPTION
   WHEN OTHERS 
   THEN
      p_SOURCE_ERROR_DESC := 'UNKWON_ERROR';
      p_SOURCE_ERROR_CODE := '99';
  
END SP_ERROR_DISPATCHER_PROGRESS;


------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------
PROCEDURE SP_ERROR_DISPATCHER_SET_STATE 
( P_ID_DISPATCHER IN NUMBER ,
P_STATUS IN VARCHAR2,
P_DESCRIPTION IN VARCHAR2, 
p_SOURCE_ERROR_DESC OUT VARCHAR2, 
p_SOURCE_ERROR_CODE OUT VARCHAR2)
AS 
VAR_ERROR_HOSPITAL NUMBER;
VAR_PENDING NUMBER;
VAR_COUNT_TREAMENT NUMBER;
VAR_ID_DISPATCHER NUMBER;
BEGIN
  VAR_ID_DISPATCHER := P_ID_DISPATCHER;
  
  SELECT ERROR_HOSPITAL_ID INTO VAR_ERROR_HOSPITAL FROM ESB_ERROR_DISPATCHER  WHERE ID = VAR_ID_DISPATCHER;
  
  IF (P_STATUS='OK') THEN  
    UPDATE ESB_ERROR_DISPATCHER SET STATUS = 'DONE', DESCRIPTION =  P_DESCRIPTION WHERE ID = VAR_ID_DISPATCHER;

    SELECT COUNT(ID) INTO VAR_COUNT_TREAMENT FROM ESB_ERROR_DISPATCHER  WHERE ERROR_HOSPITAL_ID = VAR_ERROR_HOSPITAL;
    SELECT COUNT(ID) INTO VAR_PENDING FROM ESB_ERROR_DISPATCHER  WHERE ERROR_HOSPITAL_ID = VAR_ERROR_HOSPITAL AND STATUS = 'DONE' ;
    IF (VAR_PENDING = VAR_COUNT_TREAMENT) THEN
      DELETE ESB_ERROR_DISPATCHER  WHERE ERROR_HOSPITAL_ID = VAR_ERROR_HOSPITAL ;
      UPDATE ESB_ERROR_HOSPITAL SET STATUS = 'DONE' , DESCRIPTION =  P_DESCRIPTION  WHERE ID = VAR_ERROR_HOSPITAL;  
    END IF;
  END IF;
  IF (P_STATUS='FAIL') THEN  
    UPDATE ESB_ERROR_DISPATCHER SET STATUS = 'PENDING', COUNT_RETRY = (COUNT_RETRY + 1) WHERE ID = VAR_ID_DISPATCHER;
  END IF;

  IF (P_STATUS='FATAL_FAIL') THEN  
      UPDATE ESB_ERROR_DISPATCHER SET STATUS = 'FATAL_FAIL' , DESCRIPTION =  P_DESCRIPTION  , COUNT_RETRY = (COUNT_RETRY + 1) WHERE ID = VAR_ID_DISPATCHER;
      UPDATE ESB_ERROR_HOSPITAL SET STATUS = 'UNCOMPLETED' , DESCRIPTION =  P_DESCRIPTION  WHERE ID = VAR_ERROR_HOSPITAL;  
      
      SELECT COUNT(ID) INTO VAR_COUNT_TREAMENT FROM ESB_ERROR_DISPATCHER  WHERE ERROR_HOSPITAL_ID = VAR_ERROR_HOSPITAL;
      SELECT COUNT(ID) INTO VAR_PENDING FROM ESB_ERROR_DISPATCHER  WHERE ERROR_HOSPITAL_ID = VAR_ERROR_HOSPITAL AND STATUS IN ('DONE','FATAL_FAIL','DONE_NOT_OK') ;
       
      IF (VAR_PENDING = VAR_COUNT_TREAMENT) THEN
        DELETE ESB_ERROR_DISPATCHER  WHERE ERROR_HOSPITAL_ID = VAR_ERROR_HOSPITAL ;
      END IF;
    
       
  END IF;
  
  IF (P_STATUS='DONE_NOT_OK') THEN  
      UPDATE ESB_ERROR_DISPATCHER SET STATUS = 'DONE_NOT_OK' , DESCRIPTION =  P_DESCRIPTION  WHERE ID = VAR_ID_DISPATCHER;
      UPDATE ESB_ERROR_HOSPITAL SET STATUS = 'UNCOMPLETED  ', DESCRIPTION =  P_DESCRIPTION  WHERE ID = VAR_ERROR_HOSPITAL;  
      
      SELECT COUNT(ID) INTO VAR_COUNT_TREAMENT FROM ESB_ERROR_DISPATCHER  WHERE ERROR_HOSPITAL_ID = VAR_ERROR_HOSPITAL;
      SELECT COUNT(ID) INTO VAR_PENDING FROM ESB_ERROR_DISPATCHER  WHERE ERROR_HOSPITAL_ID = VAR_ERROR_HOSPITAL AND STATUS IN ('DONE','FATAL_FAIL','DONE_NOT_OK') ;
       
      IF (VAR_PENDING = VAR_COUNT_TREAMENT) THEN
        DELETE ESB_ERROR_DISPATCHER  WHERE ERROR_HOSPITAL_ID = VAR_ERROR_HOSPITAL ;
      END IF;
  END IF;
  
EXCEPTION
WHEN OTHERS 
  THEN
      p_SOURCE_ERROR_CODE := '99';  
  
END SP_ERROR_DISPATCHER_SET_STATE;

------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------

PROCEDURE SP_ERROR_DISPATCHER_DONE 
( P_ERROR_HOSPITAL_ID IN NUMBER ,
  p_SOURCE_ERROR_DESC OUT VARCHAR2, 
  p_SOURCE_ERROR_CODE OUT VARCHAR2) AS 
VAR_ERROR_HOSPITAL NUMBER;
VAR_PENDING NUMBER;
VAR_ID_DISPATCHER NUMBER;
BEGIN
  VAR_ID_DISPATCHER := P_ERROR_HOSPITAL_ID;
  
  UPDATE ESB_ERROR_DISPATCHER SET STATUS = 'DONE' WHERE ID = VAR_ID_DISPATCHER;
  SELECT ERROR_HOSPITAL_ID INTO VAR_ERROR_HOSPITAL FROM ESB_ERROR_DISPATCHER  WHERE ID = VAR_ID_DISPATCHER;
  SELECT COUNT(ID) INTO VAR_PENDING FROM ESB_ERROR_DISPATCHER  WHERE ERROR_HOSPITAL_ID = VAR_ERROR_HOSPITAL AND STATUS <> 'DONE';
  IF (VAR_PENDING = 0) THEN
    DELETE ESB_ERROR_DISPATCHER  WHERE ERROR_HOSPITAL_ID = VAR_ERROR_HOSPITAL ;
    UPDATE ESB_ERROR_HOSPITAL SET STATUS = 'DONE' WHERE ID = VAR_ERROR_HOSPITAL;  
  END IF;

EXCEPTION
WHEN OTHERS 
  THEN
      p_SOURCE_ERROR_CODE := '99';  
  
END SP_ERROR_DISPATCHER_DONE;
------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------
PROCEDURE SP_GET_THERAPY 
( 
  P_CAPABILITY_ID IN NUMBER 
, CANONICAL_ERROR_CODE IN NUMBER 
, CANONICAL_ERROR_TYPE IN NUMBER
, THERAPY_ID OUT VARCHAR2 
) AS 
-- Define variables
   REG_TYPE VARCHAR2(50);
   REG_TYPE_AUX VARCHAR2(50);
   CORRECT_TYPE BOOLEAN ;
   CORRECT_MIN_CODE BOOLEAN ;  
   CORRECT_MAX_CODE BOOLEAN ;

   MODE_DEBUG BOOLEAN ;

  cursor c1 is
     SELECT *
     FROM ESB_ERROR_DIAGNOSIS
     WHERE CAPABILITY_ID = P_CAPABILITY_ID ORDER BY WEIGHT DESC;
BEGIN
  THERAPY_ID := NULL;
  MODE_DEBUG := FALSE;
  CORRECT_TYPE := FALSE;
   FOR c1_reg in c1
   LOOP
       REG_TYPE := c1_reg.TYPE;
       REG_TYPE_AUX := CONCAT( CANONICAL_ERROR_TYPE, '-' );
       REG_TYPE_AUX := CONCAT(  '-',REG_TYPE_AUX );
       
       IF ((REG_TYPE = '*') OR (REG_TYPE = CANONICAL_ERROR_TYPE) OR ( REG_TYPE like REG_TYPE_AUX )) THEN
              CORRECT_TYPE := TRUE;
       END IF;
       IF (c1_reg.F_CODE = '*')OR(c1_reg.F_CODE < CANONICAL_ERROR_CODE) THEN
          CORRECT_MIN_CODE := TRUE;
       END IF;
       IF (c1_reg.T_CODE = '*')OR(c1_reg.T_CODE > CANONICAL_ERROR_CODE) THEN
          CORRECT_MAX_CODE := TRUE;
       END IF;
       IF (CORRECT_TYPE) AND (CORRECT_MIN_CODE) AND (CORRECT_MAX_CODE) THEN
        THERAPY_ID :=  c1_reg.THERAPY_ID;
        EXIT;
       END IF;
   END LOOP;  
  
  EXCEPTION
  WHEN OTHERS 
  THEN
      THERAPY_ID := NULL;

END SP_GET_THERAPY;
------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------
PROCEDURE SP_ERROR_HOSPITAL
(
  P_MESSAGE_TX_ID IN NUMBER ,
  P_CAN_ERR_ID IN NUMBER ,
  P_CAPABILITY_ID IN NUMBER ,
  P_SOURCE_ERROR_CODE OUT NUMBER
) AS 

  VAR_CONVERSATION_ID VARCHAR2(50);
  VAR_CAN_ERR_ID NUMBER;
  VAR_THERAPY NUMBER;
  REG_ESB_CANONICAL_ERROR ESB_CANONICAL_ERROR%ROWTYPE;
  
  THERAPY_ID VARCHAR2(50);
BEGIN
  SELECT * INTO REG_ESB_CANONICAL_ERROR  FROM ESB_CANONICAL_ERROR WHERE ID = P_CAN_ERR_ID;
  SP_GET_THERAPY(P_CAPABILITY_ID,REG_ESB_CANONICAL_ERROR.CODE,REG_ESB_CANONICAL_ERROR.TYPE_ID,THERAPY_ID);
  IF (THERAPY_ID is NULL) OR (THERAPY_ID = '')  THEN
    INSERT INTO ESB_ERROR_HOSPITAL (ID, MESSAGE_TX_ID, THERAPY_ID, STATUS,RCD_STATUS) VALUES (ESB_ERROR_HOSPITAL_SEQ.NEXTVAL, P_MESSAGE_TX_ID,THERAPY_ID,'NONE',1);
  ELSE
    INSERT INTO ESB_ERROR_HOSPITAL (ID, MESSAGE_TX_ID, THERAPY_ID, STATUS,RCD_STATUS) VALUES (ESB_ERROR_HOSPITAL_SEQ.NEXTVAL, P_MESSAGE_TX_ID,THERAPY_ID,'PENDING',1);
  END IF;
  P_SOURCE_ERROR_CODE := 0;
  
  EXCEPTION
  WHEN OTHERS 
    THEN
      p_SOURCE_ERROR_CODE := '99';
  
END SP_ERROR_HOSPITAL;

------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------

PROCEDURE SP_ERROR_HOSPITAL_GET_MAIL (P_ERROR_TRATEMENT_ID IN NUMBER , MAIL_TO OUT VARCHAR2 , MAIL_SUBJET OUT VARCHAR2 , MAIL_BODY OUT CLOB , p_SOURCE_ERROR_CODE OUT VARCHAR2 )
  AS
  REG_ESB_ERROR_DISPATCHER ESB_ERROR_DISPATCHER%ROWTYPE;
  VAR_CONVERSATION_ID VARCHAR2(200);
  VAR_CONSUMER_ID NUMBER;
  VAR_MAILS VARCHAR2(500);
  MAIL_BODY_CLOB CLOB; 
  VAR_AUX VARCHAR2(1);
  VAR_CODE VARCHAR2(50);
  VAR_DESCRIPTION VARCHAR2(200);
  VAR_RSP_MSG CLOB; 
  MODE_DEBUG BOOLEAN ;
  VAR_CAPABILITY_ID VARCHAR2(200);
  VAR_CAPABILITY_NAME VARCHAR2(200);
  VAR_ERROR_DATE TIMESTAMP WITH TIME ZONE;
  VAR_ERROR_COD VARCHAR2(50);
  VAR_ERROR_DESC VARCHAR2(500);
  VAR_MODULE VARCHAR2(100);
  VAR_SUB_MODULE VARCHAR2(100);
  VAR_CLIENT_NAME VARCHAR2(50);
  VAR_TREATMENT_DATE TIMESTAMP WITH TIME ZONE:= SYSTIMESTAMP;

BEGIN

  

MODE_DEBUG := FALSE;

  SELECT * INTO REG_ESB_ERROR_DISPATCHER  FROM ESB_ERROR_DISPATCHER WHERE ID = P_ERROR_TRATEMENT_ID;  

  SELECT T_ESB_CONVERSATION.CONVERSATION_ID, T_ESB_CONSUMER.ID , T_ESB_CONVERSATION.CAPABILITY_ID , T_ESB_CAPABILITY.NAME
  INTO VAR_CONVERSATION_ID, VAR_CONSUMER_ID, VAR_CAPABILITY_ID,VAR_CAPABILITY_NAME
  FROM ESB_CONSUMER T_ESB_CONSUMER, 
  ESB_CONVERSATION T_ESB_CONVERSATION, 
  ESB_ERROR_HOSPITAL T_ESB_ERROR_HOSPITAL ,
  ESB_CAPABILITY T_ESB_CAPABILITY
  WHERE T_ESB_CONVERSATION.MESSAGE_TX_ID =  T_ESB_ERROR_HOSPITAL.MESSAGE_TX_ID AND T_ESB_ERROR_HOSPITAL.ID = REG_ESB_ERROR_DISPATCHER.ERROR_HOSPITAL_ID
  AND T_ESB_CONVERSATION.SEQUENCE = 0
  AND T_ESB_CONSUMER.ID = T_ESB_CONVERSATION.CONSUMER_ID 
  AND  T_ESB_CONVERSATION.CONVERSATION_ID= T_ESB_CONVERSATION.CONVERSATION_ID
  AND  T_ESB_CAPABILITY.ID = T_ESB_CONVERSATION.CAPABILITY_ID;
  
    --------------NOMBRE CLIENTE-----------------------
  SELECT T_ESB_SYSTEM.NAME INTO VAR_CLIENT_NAME
  FROM ESB_SYSTEM T_ESB_SYSTEM
  INNER JOIN ESB_CONSUMER T_ESB_CONSUMER ON (T_ESB_SYSTEM.ID=T_ESB_CONSUMER.SYSCODE AND T_ESB_CONSUMER.ID=VAR_CONSUMER_ID);
  
  ---------------------------------------------------

-- obtiene los mails
  FOR mails IN (select DETAIL_CONTENT from ESB_CONSUMER_DETAILS T_ESB_CONSUMER_DETAILS, ESB_CONSUMER_DETAILS_TYPE T_ESB_CONSUMER_DETAILS_TYPE 
where  T_ESB_CONSUMER_DETAILS.CONSUMER_ID = VAR_CONSUMER_ID AND T_ESB_CONSUMER_DETAILS.DETAIL_TYPE_ID = T_ESB_CONSUMER_DETAILS_TYPE.ID
AND T_ESB_CONSUMER_DETAILS_TYPE.NAME = 'Mail')
  LOOP
    VAR_MAILS := CONCAT(VAR_MAILS ,mails.DETAIL_CONTENT);
    VAR_AUX := ',';  
    VAR_MAILS := CONCAT(VAR_MAILS, VAR_AUX);
  END LOOP;
  
  MAIL_TO := VAR_MAILS;
  MAIL_SUBJET := 'Error en el Conversation_id ';
  MAIL_SUBJET :=  CONCAT(MAIL_SUBJET,VAR_CONVERSATION_ID);
  
  
  -------FECHA ERROR, ERROR_CODE, ERROR_DESC, MODULO Y SUBMODULO----------
  
  select MAX(T_ESB_TRACE.LOG_TIMESTAMP) INTO VAR_ERROR_DATE 
  from ESB_CONVERSATION T_ESB_CONVERSATION, ESB_TRACE T_ESB_TRACE, ESB_ERROR T_ESB_ERROR , ESB_CONVERSATION_STATUS T_ESB_CONVERSATION_STATUS 
  where T_ESB_CONVERSATION.CONVERSATION_ID = VAR_CONVERSATION_ID 
  AND T_ESB_TRACE.CONV_ID = T_ESB_CONVERSATION.ID and T_ESB_ERROR.TRACE_ID = T_ESB_TRACE.ID and t_ESB_CONVERSATION_STATUS.CONVERSATION_ID = T_ESB_CONVERSATION.CONVERSATION_ID AND
  T_ESB_ERROR.CAN_ERR_ID = T_ESB_CONVERSATION_STATUS.CAN_ERR_ID;
  
  select T_ESB_ERROR.MODULE, T_ESB_ERROR.SUB_MODULE, T_ESB_ERROR.RAW_CODE, T_ESB_ERROR.RAW_DESCRIPTION INTO VAR_MODULE, VAR_SUB_MODULE, VAR_ERROR_COD, VAR_ERROR_DESC  
  from ESB_CONVERSATION T_ESB_CONVERSATION, ESB_TRACE T_ESB_TRACE, ESB_ERROR T_ESB_ERROR , ESB_CONVERSATION_STATUS T_ESB_CONVERSATION_STATUS 
  where T_ESB_CONVERSATION.CONVERSATION_ID = VAR_CONVERSATION_ID 
  AND T_ESB_TRACE.CONV_ID = T_ESB_CONVERSATION.ID and T_ESB_ERROR.TRACE_ID = T_ESB_TRACE.ID and t_ESB_CONVERSATION_STATUS.CONVERSATION_ID = T_ESB_CONVERSATION.CONVERSATION_ID AND
  T_ESB_ERROR.CAN_ERR_ID = T_ESB_CONVERSATION_STATUS.CAN_ERR_ID AND T_ESB_TRACE.LOG_TIMESTAMP=VAR_ERROR_DATE AND ROWNUM=1;

  ------------------------------------
  
  select T_ESB_CANONICAL_ERROR.CODE, T_ESB_CANONICAL_ERROR.DESCRIPTION,
  T_ESB_CONVERSATION_STATUS.RSP_MSG INTO VAR_CODE,VAR_DESCRIPTION,VAR_RSP_MSG from ESB_CONVERSATION_STATUS T_ESB_CONVERSATION_STATUS,
  ESB_CANONICAL_ERROR T_ESB_CANONICAL_ERROR 
  WHERE T_ESB_CONVERSATION_STATUS.CONVERSATION_ID = VAR_CONVERSATION_ID 
  AND T_ESB_CANONICAL_ERROR.ID = T_ESB_CONVERSATION_STATUS.CAN_ERR_ID;

  MAIL_BODY := 'Conversation_id: ';
  MAIL_BODY :=  CONCAT(MAIL_BODY,VAR_CONVERSATION_ID);
  MAIL_BODY :=  MAIL_BODY || '<P>';
  MAIL_BODY :=  CONCAT(MAIL_BODY,' Canonical error code: ');
  MAIL_BODY :=  CONCAT(MAIL_BODY,VAR_CODE);
  MAIL_BODY :=  MAIL_BODY || '<P>';
  MAIL_BODY :=  CONCAT(MAIL_BODY,' Canonical error description: ');
  MAIL_BODY :=  CONCAT(MAIL_BODY,VAR_DESCRIPTION);
  MAIL_BODY :=  MAIL_BODY || '<P>';
  ------------NUEVO----------------------------------
  MAIL_BODY :=  CONCAT(MAIL_BODY,'Native error code: ');
  MAIL_BODY :=  CONCAT(MAIL_BODY, VAR_ERROR_COD);
  MAIL_BODY :=  MAIL_BODY || '<P>';
  MAIL_BODY :=  CONCAT(MAIL_BODY,'Native error description: ');
  MAIL_BODY :=  CONCAT(MAIL_BODY, VAR_ERROR_DESC);
  MAIL_BODY :=  MAIL_BODY || '<P>';
  MAIL_BODY :=  CONCAT(MAIL_BODY,'Error date: ');
  MAIL_BODY :=  CONCAT(MAIL_BODY, VAR_ERROR_DATE);
  MAIL_BODY :=  MAIL_BODY || '<P>';
  MAIL_BODY :=  CONCAT(MAIL_BODY,'Module: ');
  MAIL_BODY :=  CONCAT(MAIL_BODY, VAR_MODULE);
  MAIL_BODY :=  MAIL_BODY || '<P>';
  MAIL_BODY :=  CONCAT(MAIL_BODY,'Submodule: ');
  MAIL_BODY :=  CONCAT(MAIL_BODY, VAR_SUB_MODULE);
  MAIL_BODY :=  MAIL_BODY || '<P>';
  MAIL_BODY :=  CONCAT(MAIL_BODY,'Capability: ');
  MAIL_BODY :=  CONCAT(MAIL_BODY, VAR_CAPABILITY_NAME);
  MAIL_BODY :=  MAIL_BODY || '<P>';
  MAIL_BODY :=  CONCAT(MAIL_BODY,'Client: ');
  MAIL_BODY :=  CONCAT(MAIL_BODY, VAR_CLIENT_NAME);
  MAIL_BODY :=  MAIL_BODY || '<P>';
  MAIL_BODY :=  CONCAT(MAIL_BODY, 'Aplication treatment date: ');
  MAIL_BODY :=  CONCAT(MAIL_BODY, VAR_TREATMENT_DATE);
  MAIL_BODY :=  MAIL_BODY || '<P>';
  MAIL_BODY :=  CONCAT(MAIL_BODY, 'Response: ');
  MAIL_BODY := CONCAT(MAIL_BODY,VAR_RSP_MSG);
  
 
  p_SOURCE_ERROR_CODE := 0; 
 
  EXCEPTION
   WHEN no_data_found 
      then 
      p_SOURCE_ERROR_CODE := '0';
      MAIL_TO := VAR_MAILS;
      MAIL_BODY_CLOB := 'ERROR: AL RECUPERAR INFORMACION';
  WHEN OTHERS 
    THEN
      p_SOURCE_ERROR_CODE := '99';
END SP_ERROR_HOSPITAL_GET_MAIL;

------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------

  PROCEDURE SP_ERROR_HOSPITAL_ADMISSION
( 
  P_PRIORITY IN NUMBER ,
  P_COUNT IN NUMBER
)
AS
BEGIN
  FOR result_error_hospital IN (SELECT T_HOSPITAL.ID, T_HOSPITAL.MESSAGE_TX_ID, T_HOSPITAL.STATUS, T_HOSPITAL.THERAPY_ID, T_CANONICAL_ERROR.PRIORITY
        FROM ESB_ERROR_HOSPITAL T_HOSPITAL
      INNER JOIN ESB_CONVERSATION T_CONVERSATION ON  T_HOSPITAL.MESSAGE_TX_ID = T_CONVERSATION.MESSAGE_TX_ID
      INNER JOIN ESB_CONVERSATION_STATUS T_CONVERSATION_STATUS ON T_CONVERSATION.CONVERSATION_ID =  T_CONVERSATION_STATUS.CONVERSATION_ID 
      INNER JOIN ESB_CANONICAL_ERROR T_CANONICAL_ERROR ON  T_CANONICAL_ERROR.ID = T_CONVERSATION_STATUS.CAN_ERR_ID 
      WHERE T_CONVERSATION.SEQUENCE = 0 
      AND T_CANONICAL_ERROR.PRIORITY = P_PRIORITY 
      AND T_HOSPITAL.STATUS= 'PENDING'
      AND (NOT T_HOSPITAL.THERAPY_ID IS NULL)
      AND ROWNUM <= P_COUNT)
       LOOP      
           FOR tratmenet IN (SELECT * FROM ESB_ERROR_TREATMENT_PLAN  T_ESB_ERROR_TREATMENT_PLAN WHERE  T_ESB_ERROR_TREATMENT_PLAN.THERAPY_ID = result_error_hospital.THERAPY_ID)
           LOOP
                INSERT INTO ESB_ERROR_DISPATCHER (ID, ERROR_HOSPITAL_ID, TREATMENT_ID, STATUS,COUNT_RETRY) VALUES (ESB_ERROR_DISPATCHER_SEQ.NEXTVAL, result_error_hospital.ID,tratmenet.TREATMENT_ID,'PENDING',0);
                UPDATE ESB_ERROR_HOSPITAL SET STATUS = 'IN_PROGRESS' WHERE ID = result_error_hospital.ID;         
           END LOOP;
           
      END LOOP;
END SP_ERROR_HOSPITAL_ADMISSION;
------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------
PROCEDURE SP_ERROR_DERIVATION 
( 
  P_SOURCE_ERROR_CODE OUT NUMBER
)AS 
  VAR_COUNT_PRIORITY_1 NUMBER;
  VAR_COUNT_PRIORITY_2 NUMBER;
  VAR_COUNT_PRIORITY_3 NUMBER;
  VAR_MAX_NUMBER NUMBER;
  VAR_ERROR_AMOUNT NUMBER;
BEGIN
      VAR_ERROR_AMOUNT:= 0;
      SELECT COUNT(ID) INTO VAR_ERROR_AMOUNT
      FROM ESB_ERROR_HOSPITAL 
      WHERE ESB_ERROR_HOSPITAL.STATUS = 'PENDING' AND ESB_ERROR_HOSPITAL.THERAPY_ID IS NOT NULL;
      
      IF ( VAR_ERROR_AMOUNT > 0 ) THEN
      
        SELECT COUNT_PRIORITY_1,COUNT_PRIORITY_2,COUNT_PRIORITY_2 INTO VAR_COUNT_PRIORITY_1 , VAR_COUNT_PRIORITY_2,VAR_COUNT_PRIORITY_3   FROM ESB_ERROR_DERIVATION_CONF;
        SP_ERROR_HOSPITAL_ADMISSION(1,VAR_COUNT_PRIORITY_1);
        SP_ERROR_HOSPITAL_ADMISSION(2,VAR_COUNT_PRIORITY_2);
        SP_ERROR_HOSPITAL_ADMISSION(3,VAR_COUNT_PRIORITY_3);
      END IF;      
      
      P_SOURCE_ERROR_CODE := 0;
      EXCEPTION
      WHEN OTHERS 
        THEN
            p_SOURCE_ERROR_CODE := '99';
      
END SP_ERROR_DERIVATION;

END ESB_ERROR_HOSPITAL_PKG;