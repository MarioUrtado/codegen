create or replace PACKAGE BODY "ESB_RETRY_MANAGER_PKG" AS
----------------------------------------------------------------------------------------------------


PROCEDURE SP_GET_CONV_ID_TREATMENT    
    (P_ERROR_TREATMENT_ID IN NUMBER ,
    P_CONVERSATION OUT VARCHAR
    ) AS
    MODE_DEBUG BOOLEAN;
BEGIN

    SELECT T_ESB_CONVERSATION.CONVERSATION_ID
    INTO P_CONVERSATION
    FROM 
    ESB_CONVERSATION T_ESB_CONVERSATION, 
    ESB_ERROR_HOSPITAL T_ESB_ERROR_HOSPITAL ,
    ESB_ERROR_DISPATCHER T_ESB_ERROR_DISPATCHER
    WHERE T_ESB_CONVERSATION.MESSAGE_TX_ID =  T_ESB_ERROR_HOSPITAL.MESSAGE_TX_ID AND T_ESB_ERROR_HOSPITAL.ID = T_ESB_ERROR_DISPATCHER.ERROR_HOSPITAL_ID
    AND T_ESB_CONVERSATION.SEQUENCE = 0
    AND  T_ESB_ERROR_DISPATCHER.ID = P_ERROR_TREATMENT_ID;
    
END SP_GET_CONV_ID_TREATMENT;

----------------------------------------------------------------------------------------------------
PROCEDURE SP_ADD_SECONDS
    (P_TIMESTAMP IN TIMESTAMP ,
    P_SECONDS IN NUMBER, 
    P_TIMESTAMP_RESTULT OUT TIMESTAMP
    ) AS
    MODE_DEBUG BOOLEAN;
BEGIN
    P_TIMESTAMP_RESTULT := P_TIMESTAMP;
    P_TIMESTAMP_RESTULT := P_TIMESTAMP_RESTULT+ numToDSInterval( P_SECONDS, 'second' );
END SP_ADD_SECONDS;
----------------------------------------------------------------------------------------------------
PROCEDURE SP_GET_EH_DETAILS
  ( P_ERROR_TREATMENT_ID IN NUMBER ,
    VAR_ERROR_HOSPITAL_ID OUT NUMBER,
    VAR_TREATMENT_ID OUT NUMBER, 
    VAR_MESSAGE_TX_ID OUT NUMBER)  
    AS
    BEGIN
    
    SELECT T_ESB_ERROR_DISPATCHER.ERROR_HOSPITAL_ID ,
    T_ESB_ERROR_DISPATCHER.ID ,  
    T_ESB_ERROR_HOSPITAL.MESSAGE_TX_ID 
    INTO VAR_ERROR_HOSPITAL_ID, 
    VAR_TREATMENT_ID, 
    VAR_MESSAGE_TX_ID
    FROM ESB_ERROR_HOSPITAL  T_ESB_ERROR_HOSPITAL, 
    ESB_ERROR_DISPATCHER  T_ESB_ERROR_DISPATCHER  
    WHERE T_ESB_ERROR_DISPATCHER.ID = P_ERROR_TREATMENT_ID AND T_ESB_ERROR_HOSPITAL.ID = T_ESB_ERROR_DISPATCHER.ERROR_HOSPITAL_ID;
    
    END;
----------------------------------------------------------------------------------------------------

PROCEDURE SP_GET_CONV_DETAILS
  ( VAR_MESSAGE_TX_ID IN NUMBER ,
    VAR_CONVERSATION_ID OUT VARCHAR2,
    VAR_MESSAGE OUT CLOB, 
    VAR_CAPABILITY_ID OUT NUMBER,
    VAR_ORIGINAL_CONV_ID OUT VARCHAR2)  
    AS
    BEGIN
    
    SELECT T_ESB_CONVERSATION.CONVERSATION_ID, T_ESB_LOG.MESSAGE  , 
    T_ESB_CONVERSATION.CAPABILITY_ID ,
    T_ESB_CONVERSATION.CORRELATION_ID
    INTO VAR_CONVERSATION_ID,
    VAR_MESSAGE,
    VAR_CAPABILITY_ID,
    VAR_ORIGINAL_CONV_ID
    FROM ESB_CONVERSATION T_ESB_CONVERSATION, ESB_TRACE T_ESB_TRACE , ESB_LOG T_ESB_LOG where
    T_ESB_CONVERSATION.MESSAGE_TX_ID = VAR_MESSAGE_TX_ID AND T_ESB_CONVERSATION.SEQUENCE = 0
    AND T_ESB_TRACE.CONV_ID = T_ESB_CONVERSATION.ID AND T_ESB_LOG.TRACE_ID = T_ESB_TRACE.ID AND T_ESB_LOG.TYPE_ID = 1;
    
    END;
----------------------------------------------------------------------------------------------------

PROCEDURE SP_GET_RM_CONF_BY_CAP
  ( VAR_CAPABILITY_ID IN NUMBER ,
    VAR_ESB_RETRYMANAGER_CONFIG_ID OUT NUMBER,
    VAR_INTERVAL_TIME OUT NUMBER, 
    VAR_RETRY_MAX OUT NUMBER)  
    AS
    BEGIN
    SELECT ID,INTERVAL_TIME, RETRY_MAX INTO VAR_ESB_RETRYMANAGER_CONFIG_ID,VAR_INTERVAL_TIME , VAR_RETRY_MAX
    FROM ESB_RETRYMANAGER_CONFIG WHERE CAPABILITY_ID = VAR_CAPABILITY_ID;
    
END;
    
----------------------------------------------------------------------------------------------------

PROCEDURE SP_GET_RETRY_INFO
  ( VAR_ORIGINAL_CONV_ID IN VARCHAR2 ,
    RETRY_MANAGER_ID OUT  NUMBER ,
    VAR_ERROR_HOSPITAL_ID_OLD OUT NUMBER,
    VAR_ERROR_TREATMENT_ID_OLD OUT NUMBER, 
    VAR_COUNT_RETRY OUT NUMBER,
    IS_RETRY OUT BOOLEAN)  
    AS
    BEGIN
     
    SELECT ID,
    ERROR_HOSPITAL_ID,
    ERROR_TREATMENT_ID,
    RETRY_COUNT 
    INTO RETRY_MANAGER_ID ,
    VAR_ERROR_HOSPITAL_ID_OLD, 
    VAR_ERROR_TREATMENT_ID_OLD,
    VAR_COUNT_RETRY
    FROM ESB_RETRYMANAGER WHERE CONV_ORIGINAL_ID = VAR_ORIGINAL_CONV_ID;
    IS_RETRY := TRUE;
    
EXCEPTION 
    WHEN NO_DATA_FOUND THEN 
    IS_RETRY := FALSE;
END;

----------------------------------------------------------------------------------------------------


PROCEDURE SP_REGISTER_RETRY 
  ( P_ERROR_TREATMENT_ID IN NUMBER ,
    P_FECHA IN TIMESTAMP,
    p_SOURCE_ERROR_DESC OUT VARCHAR2, 
    p_SOURCE_ERROR_CODE OUT VARCHAR2)  
    AS
    
VAR_ERROR_HOSPITAL_ID NUMBER;
VAR_TREATMENT_ID NUMBER;
VAR_MESSAGE_TX_ID NUMBER;
VAR_CONVERSATION_ID VARCHAR2(50 BYTE);
VAR_ORIGINAL_CONV_ID VARCHAR2(50 BYTE);
VAR_MESSAGE CLOB;
VAR_CAPABILITY_ID NUMBER;
VAR_ESB_RETRYMANAGER_CONFIG_ID NUMBER;
VAR_CURRENT_TIMESTAMP TIMESTAMP;
VAR_INTERVAL_TIME NUMBER;
VAR_ESB_MANAGER_CONFIG_ID NUMBER;
VAR_RETRY_MAX NUMBER;
VAR_COUNT_RETRY NUMBER;
VAR_ERROR_TREATMENT_ID NUMBER;
RETRY_MANAGER_ID NUMBER;
MODE_DEBUG BOOLEAN ;
IS_RETRY BOOLEAN ;
VAR_ERROR_HOSPITAL_ID_OLD NUMBER;
VAR_ERROR_TREATMENT_ID_OLD NUMBER;

VAR_DESCRIPTION  VARCHAR2(200);
VAR_SOURCE_ERROR_DESC  VARCHAR2(200);
VAR_SOURCE_ERROR_CODE  VARCHAR2(200);

BEGIN
  
MODE_DEBUG := TRUE;
        
-- RECUPER EL TREATMENT_ID, MESSAGE_TX_ID, ERROR_HOSPITAL_ID
SP_GET_EH_DETAILS(P_ERROR_TREATMENT_ID,VAR_ERROR_HOSPITAL_ID,VAR_TREATMENT_ID,VAR_MESSAGE_TX_ID);

-- RECUPERA BODY, CONVERSATION, CAPABILITY, CORRELATION
SP_GET_CONV_DETAILS(VAR_MESSAGE_TX_ID,VAR_CONVERSATION_ID,VAR_MESSAGE,VAR_CAPABILITY_ID,VAR_ORIGINAL_CONV_ID);

-- RECUPERA LA CONFIGURACION
SP_GET_RM_CONF_BY_CAP (VAR_CAPABILITY_ID,VAR_ESB_RETRYMANAGER_CONFIG_ID,VAR_INTERVAL_TIME,VAR_RETRY_MAX);

-- INCREMENTA LA FECHA EN EL TIEMPO PARAMETRIZADO PARA EL REINTENTO
SP_ADD_SECONDS(P_FECHA,VAR_INTERVAL_TIME,VAR_CURRENT_TIMESTAMP);

-- VERIFICA SI ES UN RE INTENTO EXISTENTE
IF (VAR_ORIGINAL_CONV_ID IS NOT NULL)THEN
          SP_GET_RETRY_INFO(VAR_ORIGINAL_CONV_ID,RETRY_MANAGER_ID,VAR_ERROR_HOSPITAL_ID_OLD,VAR_ERROR_TREATMENT_ID_OLD,VAR_COUNT_RETRY,IS_RETRY);
END IF;

IF (IS_RETRY) THEN
  -- CIERRA EL DISPATCHER    
  VAR_DESCRIPTION  := 'No se ejecuto el reintento correctamente ';
  ESB_ERROR_HOSPITAL_PKG.SP_ERROR_DISPATCHER_SET_STATE(VAR_ERROR_TREATMENT_ID_OLD,'DONE_NOT_OK',VAR_DESCRIPTION,VAR_SOURCE_ERROR_DESC,VAR_SOURCE_ERROR_CODE);  
  -- CIERRA EL HISTORICO
  UPDATE  ESB_RETRYMANAGER_HISTORY SET STATUS = 'FAIL'  WHERE RETRYMANAGER_ID = RETRY_MANAGER_ID;
  IF (VAR_RETRY_MAX > VAR_COUNT_RETRY) THEN
    
    UPDATE ESB_RETRYMANAGER SET STATUS = 'PENDING', ERROR_HOSPITAL_ID = VAR_ERROR_HOSPITAL_ID , ERROR_TREATMENT_ID = VAR_TREATMENT_ID ,DATE_NEXT_RETRY = VAR_CURRENT_TIMESTAMP WHERE ID = RETRY_MANAGER_ID;  
    
    p_SOURCE_ERROR_DESC := 'OK';
    p_SOURCE_ERROR_CODE := '0';     
  
  ELSE    
    VAR_DESCRIPTION  := 'Fallo ultimo reintento';
    UPDATE ESB_RETRYMANAGER SET STATUS = 'DONE_FAIL', ERROR_HOSPITAL_ID = VAR_ERROR_HOSPITAL_ID ,ERROR_TREATMENT_ID = VAR_TREATMENT_ID ,DATE_NEXT_RETRY = VAR_CURRENT_TIMESTAMP WHERE ID = RETRY_MANAGER_ID;  
    ESB_ERROR_HOSPITAL_PKG.SP_ERROR_DISPATCHER_SET_STATE(P_ERROR_TREATMENT_ID,'DONE_NOT_OK',VAR_DESCRIPTION,VAR_SOURCE_ERROR_DESC,VAR_SOURCE_ERROR_CODE);  
    
    p_SOURCE_ERROR_DESC := 'OK';
    p_SOURCE_ERROR_CODE := '1';     
  END IF;
  
   

ELSE
  -- INSERTA EL REGISTRO EN 
  INSERT INTO ESB_RETRYMANAGER (ID, RETRYMANAGER_CONFIG_ID, ERROR_HOSPITAL_ID,CONV_ORIGINAL_ID,
  RETRY_COUNT,STATUS,DATE_NEXT_RETRY,ERROR_TREATMENT_ID,REQUEST_BODY)
  VALUES (ESB_RETRYMANAGER_SEQ.NEXTVAL, VAR_ESB_RETRYMANAGER_CONFIG_ID,VAR_ERROR_HOSPITAL_ID,VAR_CONVERSATION_ID,0,'PENDING',VAR_CURRENT_TIMESTAMP,VAR_TREATMENT_ID,VAR_MESSAGE);    

  p_SOURCE_ERROR_DESC := 'OK';
  p_SOURCE_ERROR_CODE := '0';      
END IF;



EXCEPTION
  WHEN NO_DATA_FOUND
      then 
      p_SOURCE_ERROR_DESC := 'NO_DATA_FOUND';
      p_SOURCE_ERROR_CODE := '99';
   WHEN OTHERS 
   THEN
      p_SOURCE_ERROR_DESC := 'UNKWON_ERROR';
      p_SOURCE_ERROR_CODE := '99';
END SP_REGISTER_RETRY;

----------------------------------------------------------------------------------------------------

PROCEDURE SP_CHECK_RETRY_STATUS
  ( P_CONVERSATION_ID IN VARCHAR2 ,
    p_STATUS OUT VARCHAR2, 
    p_SOURCE_ERROR_DESC OUT VARCHAR2, 
    p_SOURCE_ERROR_CODE OUT VARCHAR2)  
    AS
   VAR_STATUS VARCHAR2(50 BYTE); 
BEGIN
  
  SELECT  STATUS INTO VAR_STATUS FROM ESB_RETRYMANAGER WHERE CONV_ORIGINAL_ID = P_CONVERSATION_ID;
  p_STATUS := VAR_STATUS; 
  p_SOURCE_ERROR_DESC := '';
  p_SOURCE_ERROR_CODE := '0';
EXCEPTION
  WHEN NO_DATA_FOUND
      then 
      p_SOURCE_ERROR_DESC := 'NO_DATA_FOUND';
      p_SOURCE_ERROR_CODE := '99';
   WHEN OTHERS 
   THEN
      p_SOURCE_ERROR_DESC := 'UNKWON_ERROR';
      p_SOURCE_ERROR_CODE := '99';
  
END SP_CHECK_RETRY_STATUS;

----------------------------------------------------------------------------------------------------

PROCEDURE SP_RETRY_UPDATE_STATUS
  ( P_IDS IN RETRYMANAGER_ID_T_CUR ,
    P_STATUS IN RETRYMANAGER_STATUS_T_CUR,
    P_SOURCE_ERROR_DESC OUT VARCHAR2, 
    P_SOURCE_ERROR_CODE OUT VARCHAR2)
    AS
  
  VAR_ID NUMBER;
BEGIN
  
    FOR I IN P_IDS.FIRST .. P_IDS.LAST LOOP
      UPDATE ESB_RETRYMANAGER  SET STATUS = P_STATUS(I) WHERE ID = P_IDS(I);
    END LOOP;  
      P_SOURCE_ERROR_DESC := '';
      P_SOURCE_ERROR_CODE := '00';


EXCEPTION
  WHEN NO_DATA_FOUND
      then 
      p_SOURCE_ERROR_DESC := 'NO_DATA_FOUND';
      p_SOURCE_ERROR_CODE := '99';
   WHEN OTHERS 
   THEN
      p_SOURCE_ERROR_DESC := 'UNKWON_ERROR';
      p_SOURCE_ERROR_CODE := '99';
   
END SP_RETRY_UPDATE_STATUS;

----------------------------------------------------------------------------------------------------

PROCEDURE SP_REGISTER_NEW_RETRY
    ( P_ERROR_TREATMENT_ID IN NUMBER , 
    P_URL OUT VARCHAR2, 
    P_ACTION OUT VARCHAR2, 
    P_MAX_RETRY OUT NUMBER, 
    P_CAPABILITY OUT VARCHAR2, 
    P_NUMBER_RETRY OUT NUMBER, 
    P_ID_ESB_RETRYMANAGER_HISTORY OUT NUMBER,
    P_SOURCE_ERROR_DESC OUT VARCHAR2, 
    P_SOURCE_ERROR_CODE OUT VARCHAR2)
    AS
  
  VAR_CONVERSATION_ID VARCHAR2(200 BYTE);
  REG_ESB_REGISTER ESB_RETRYMANAGER%ROWTYPE;
    
BEGIN
  
-- ACTUALIZA EL CONTADOR DE RETRY MANAGER Y CAMBIA EL ESTADO
UPDATE  ESB_RETRYMANAGER SET RETRY_COUNT = RETRY_COUNT + 1, STATUS = 'PROCESSING' WHERE ERROR_TREATMENT_ID = P_ERROR_TREATMENT_ID;
-- BUSCA EL TRATAMIENTO
SELECT * INTO  REG_ESB_REGISTER FROM ESB_RETRYMANAGER WHERE ERROR_TREATMENT_ID = P_ERROR_TREATMENT_ID;

P_ID_ESB_RETRYMANAGER_HISTORY := ESB_RETRYMANAGER_HISTORY_SEQ.NEXTVAL;

SP_GET_CONV_ID_TREATMENT(P_ERROR_TREATMENT_ID,VAR_CONVERSATION_ID);
-- Crea la tabla historico
INSERT INTO ESB_RETRYMANAGER_HISTORY (ID,RETRYMANAGER_ID,STATUS,CONVERSATION_ID,ERROR_HOSPITAL_ID,ERROR_TREATMENT_ID) 
VALUES (P_ID_ESB_RETRYMANAGER_HISTORY, REG_ESB_REGISTER.ID,'PROCESSING',VAR_CONVERSATION_ID,REG_ESB_REGISTER.ERROR_HOSPITAL_ID ,REG_ESB_REGISTER.ERROR_TREATMENT_ID);

-- Recupera la configuracion 
 SELECT  T_ESB_RETRYMANAGER_CONFIG.RETRY_MAX,
T_ESB_SERVICE_DETAILS.DETAIL_CONTENT,
T_ESB_CAPABILITY_DETAILS.DETAIL_CONTENT, 
T_ESB_CAPABILITY.NAME
INTO 
 P_MAX_RETRY,P_URL,P_ACTION , P_CAPABILITY 
 FROM ESB_RETRYMANAGER_CONFIG T_ESB_RETRYMANAGER_CONFIG , 
 ESB_CAPABILITY T_ESB_CAPABILITY,
 ESB_CAPABILITY_DETAILS T_ESB_CAPABILITY_DETAILS,
 ESB_CAPABILITY_DETAILS_TYPE ESB_CAPABILITY_DETAILS_TYPE ,
 ESB_SERVICE_DETAILS T_ESB_SERVICE_DETAILS,
 ESB_SERVICE_DETAILS_TYPE T_ESB_SERVICE_DETAILS_TYPE 
WHERE 
T_ESB_RETRYMANAGER_CONFIG.ID = 1 AND T_ESB_CAPABILITY.ID = T_ESB_RETRYMANAGER_CONFIG.CAPABILITY_ID
AND T_ESB_CAPABILITY_DETAILS.CAPABILITY_ID = T_ESB_RETRYMANAGER_CONFIG.CAPABILITY_ID
AND T_ESB_CAPABILITY_DETAILS.DETAIL_TYPE_ID = ESB_CAPABILITY_DETAILS_TYPE.ID
AND T_ESB_CAPABILITY.SERVICE_ID = T_ESB_SERVICE_DETAILS.SERVICE_ID
AND T_ESB_SERVICE_DETAILS_TYPE.NAME = 'endpoint'
AND T_ESB_SERVICE_DETAILS.DETAIL_TYPE_ID = T_ESB_SERVICE_DETAILS_TYPE.ID
AND ESB_CAPABILITY_DETAILS_TYPE.NAME = 'Action';

p_SOURCE_ERROR_DESC := 'OK';
p_SOURCE_ERROR_CODE := '0';


END SP_REGISTER_NEW_RETRY;

----------------------------------------------------------------------------------------------------

PROCEDURE SP_REGISTER_RETRY_RESULT
( P_ERROR_RETRYMANAGER_ID IN NUMBER ,
  P_ID_ESB_RETRYMANAGER_HISTORY IN NUMBER,
  P_FECHA IN TIMESTAMP,
  p_STATUS IN VARCHAR2, 
  p_SOURCE_ERROR_DESC OUT VARCHAR2, 
  p_SOURCE_ERROR_CODE OUT VARCHAR2)
   AS
   
   VAR_RETRYMANAGER_ID NUMBER;
   VAR_CURRENT_TIMESTAMP TIMESTAMP;
   VAR_INTERVAL_TIME NUMBER;
   
BEGIN

-- POSIBLES ESTADOS OK - FAIL - RETRY
SELECT T_ESB_RETRYMANAGER.ID, T_ESB_RETRYMANAGER_CONFIG.INTERVAL_TIME INTO  VAR_RETRYMANAGER_ID,VAR_INTERVAL_TIME
FROM ESB_RETRYMANAGER T_ESB_RETRYMANAGER, ESB_RETRYMANAGER_CONFIG T_ESB_RETRYMANAGER_CONFIG 
WHERE T_ESB_RETRYMANAGER.ID = P_ERROR_RETRYMANAGER_ID AND T_ESB_RETRYMANAGER_CONFIG.ID = T_ESB_RETRYMANAGER.RETRYMANAGER_CONFIG_ID;

-- REGISTRA QUE EL REINTENTO TERMINO CORRECTAMENTE
IF (p_STATUS = 'OK') THEN 
  
  UPDATE  ESB_RETRYMANAGER SET STATUS = 'DONE_OK' WHERE ID = VAR_RETRYMANAGER_ID;
  UPDATE  ESB_RETRYMANAGER_HISTORY SET STATUS = 'DONE' WHERE ID = P_ID_ESB_RETRYMANAGER_HISTORY;
END IF;


-- REGISTRA QUE EL REINTENTO TERMINO DE FORMA INCORRECTA PERO TIENE QUE VOLVER A REINTENTAR
IF (p_STATUS = 'RETRY') THEN 
  VAR_CURRENT_TIMESTAMP := P_FECHA;
  
  VAR_CURRENT_TIMESTAMP := VAR_CURRENT_TIMESTAMP+ numToDSInterval( VAR_INTERVAL_TIME, 'second' );
  UPDATE  ESB_RETRYMANAGER SET STATUS = 'PENDING', DATE_NEXT_RETRY = VAR_CURRENT_TIMESTAMP   WHERE ID = VAR_RETRYMANAGER_ID;
  UPDATE  ESB_RETRYMANAGER_HISTORY SET STATUS = 'FAIL' WHERE ID = P_ID_ESB_RETRYMANAGER_HISTORY;
END IF;

-- REGISTRA QUE EL REINTENTO TERMINO DE FORMA INCORRECTA Y NO DEBE REINTENTAR
IF (p_STATUS = 'FAIL') THEN 
  
  UPDATE  ESB_RETRYMANAGER SET STATUS = 'DONE_FAIL' WHERE ID = VAR_RETRYMANAGER_ID;
  UPDATE  ESB_RETRYMANAGER_HISTORY SET STATUS = 'FAIL' WHERE ID = P_ID_ESB_RETRYMANAGER_HISTORY;
END IF;


p_SOURCE_ERROR_DESC := 'OK';
p_SOURCE_ERROR_CODE := '0';
   
END SP_REGISTER_RETRY_RESULT;

----------------------------------------------------------------------------------------------------

PROCEDURE SP_GET_CAPABILITY_ID
    ( P_CONVERSATION_ID IN VARCHAR2 ,
    P_CAPABILITY_ID OUT VARCHAR2 ) AS
  BEGIN
    SELECT T_ESB_CONVERSATION.CAPABILITY_ID 
    INTO P_CAPABILITY_ID
   FROM ESB_CONVERSATION T_ESB_CONVERSATION     
   WHERE T_ESB_CONVERSATION.CONVERSATION_ID = P_CONVERSATION_ID;
  
END SP_GET_CAPABILITY_ID;
----------------------------------------------------------------------------------------------------

  PROCEDURE SP_RETRY_INFO_CONV
    ( P_CONVERSATION_ID IN VARCHAR2 ,
    P_CORRELATION_ID IN VARCHAR2, 
    P_RETRY_COUNT OUT NUMBER, 
    P_STATUS OUT VARCHAR, 
    P_SOURCE_ERROR_DESC OUT VARCHAR2, 
    P_SOURCE_ERROR_CODE OUT VARCHAR2) AS
    VAR_CAPATILITY_ID NUMBER;
  BEGIN
  
  
    IF (P_CORRELATION_ID IS NULL) THEN
      SELECT RETRY_COUNT,STATUS INTO P_RETRY_COUNT,P_STATUS  FROM ESB_RETRYMANAGER  WHERE  CONV_ORIGINAL_ID = P_CONVERSATION_ID;  
    ELSE
      SELECT RETRY_COUNT,STATUS INTO P_RETRY_COUNT,P_STATUS  FROM ESB_RETRYMANAGER  WHERE  CONV_ORIGINAL_ID = P_CORRELATION_ID;  
    END IF;
    
      P_SOURCE_ERROR_DESC := 'OK'; 
      P_SOURCE_ERROR_CODE  :=' 0';
      
      EXCEPTION
  WHEN OTHERS 
  THEN
      p_SOURCE_ERROR_CODE := '99';  
      
  END SP_RETRY_INFO_CONV;
----------------------------------------------------------------------------------------------------

  PROCEDURE SP_REGISTER_STATUS
    ( P_CONVERSATION_ID IN VARCHAR2 ,
    P_CORRELATION_ID IN VARCHAR2, 
    P_STATUS IN VARCHAR2, 
    P_SOURCE_ERROR_DESC OUT VARCHAR2, 
    P_SOURCE_ERROR_CODE OUT VARCHAR2)
     AS
     VAR_RETRYMANAGER_ID NUMBER;
     VAR_ERROR_TREATMENT_ID NUMBER;
     VAR_DESCRIPTION VARCHAR2(200 BYTE);
     
  BEGIN
  IF (P_CORRELATION_ID IS NULL) THEN
    SELECT ID, ERROR_TREATMENT_ID INTO VAR_RETRYMANAGER_ID , VAR_ERROR_TREATMENT_ID FROM ESB_RETRYMANAGER WHERE CONV_ORIGINAL_ID = P_CONVERSATION_ID;   
  ELSE
   SELECT ID, ERROR_TREATMENT_ID INTO VAR_RETRYMANAGER_ID , VAR_ERROR_TREATMENT_ID FROM ESB_RETRYMANAGER WHERE CONV_ORIGINAL_ID = P_CORRELATION_ID;   
  END IF;
    
  
  VAR_DESCRIPTION := 'REINTOS FINALIZADOS OK';
  UPDATE  ESB_RETRYMANAGER SET STATUS = 'DONE_OK' WHERE ID = VAR_RETRYMANAGER_ID;
  UPDATE  ESB_RETRYMANAGER_HISTORY SET STATUS = 'DONE' WHERE ID = VAR_RETRYMANAGER_ID;
  
  ESB_ERROR_HOSPITAL_PKG.SP_ERROR_DISPATCHER_SET_STATE(VAR_ERROR_TREATMENT_ID,'DONE',VAR_DESCRIPTION,P_SOURCE_ERROR_DESC,P_SOURCE_ERROR_CODE);  
  
  P_SOURCE_ERROR_DESC := ''; 
  P_SOURCE_ERROR_CODE  :='0';
  
  EXCEPTION
  WHEN OTHERS 
  THEN
      p_SOURCE_ERROR_CODE := '99';  
  
  END SP_REGISTER_STATUS;

----------------------------------------------------------------------------------------------------

  PROCEDURE SP_RETRY_CONF_CONV
    ( P_CONVERSATION_ID IN VARCHAR2 ,
    P_CORRELATION_ID IN VARCHAR2, 
    P_MAX_RETRY OUT NUMBER, 
    P_INTERVAL_TIME OUT NUMBER, 
    P_SOURCE_ERROR_DESC OUT VARCHAR2, 
    P_SOURCE_ERROR_CODE OUT VARCHAR2) AS
    VAR_CAPATILITY_ID NUMBER;
  BEGIN
  
    SP_GET_CAPABILITY_ID(P_CONVERSATION_ID,VAR_CAPATILITY_ID);
    SELECT INTERVAL_TIME, RETRY_MAX INTO P_INTERVAL_TIME , P_MAX_RETRY
    FROM ESB_RETRYMANAGER_CONFIG WHERE CAPABILITY_ID = VAR_CAPATILITY_ID;
   
    P_SOURCE_ERROR_DESC := ''; 
     P_SOURCE_ERROR_CODE  :='0';
  EXCEPTION
  WHEN OTHERS 
  THEN
      p_SOURCE_ERROR_CODE := '99';  
     
  END SP_RETRY_CONF_CONV;
  
----------------------------------------------------------------------------------------------------

END ESB_RETRY_MANAGER_PKG;